#!/bin/bash
# KB - Universal Knowledge Base Command
# Install this to /usr/local/bin/kb for system-wide access

KB_DAEMON_PATH="/Users/fathindosunmu/DEV/knowledge-base/.kb-daemon"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Main command handler
case "$1" in
    review)
        echo -e "${BLUE}üìä Opening KB Daily Review...${NC}"
        cd "$KB_DAEMON_PATH" && python3 interface/cli.py review
        ;;
    
    start)
        echo -e "${GREEN}üöÄ Starting KB Daemon...${NC}"
        cd "$KB_DAEMON_PATH" && python3 kb_daemon.py start
        ;;
    
    stop)
        echo -e "${RED}‚èπÔ∏è  Stopping KB Daemon...${NC}"
        cd "$KB_DAEMON_PATH" && python3 kb_daemon.py stop
        ;;
    
    status)
        echo -e "${BLUE}üìà KB Daemon Status${NC}"
        if pgrep -f "kb_daemon.py" > /dev/null; then
            echo -e "${GREEN}‚úì Daemon is running${NC}"
            echo ""
            ps aux | grep -E "kb_daemon|kb-daemon" | grep -v grep
        else
            echo -e "${YELLOW}‚óã Daemon is not running${NC}"
        fi
        
        # Show recent captures
        LATEST_LOG=$(ls -t "$KB_DAEMON_PATH/logs"/shadow_*.json 2>/dev/null | head -1)
        if [ -n "$LATEST_LOG" ]; then
            COUNT=$(grep -c '{' "$LATEST_LOG" 2>/dev/null || echo 0)
            echo ""
            echo -e "${BLUE}Recent captures: ${COUNT} events${NC}"
        fi
        ;;
    
    log|logs|view)
        echo -e "${BLUE}üìã KB Captured Data${NC}"
        cd "$KB_DAEMON_PATH" && python3 view_logs.py
        ;;
    
    capture)
        # Manual capture command
        shift
        echo -e "${GREEN}‚úèÔ∏è  Manual KB Entry${NC}"
        echo "{\"type\":\"manual\",\"timestamp\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",\"data\":{\"note\":\"$*\"},\"importance\":7}" >> ~/.kb-daemon/capture/manual_events.jsonl
        echo "Entry captured: $*"
        ;;
    
    test)
        echo -e "${BLUE}üß™ Testing KB System...${NC}"
        cd "$KB_DAEMON_PATH" && python3 kb_daemon.py test
        ;;
    
    stats)
        echo -e "${BLUE}üìä KB Statistics${NC}"
        cd "$KB_DAEMON_PATH" && python3 -c "
from storage.db_manager import DatabaseManager
from pathlib import Path
db = DatabaseManager(Path.home() / '.kb-daemon' / 'storage' / 'kb_store.db')
stats = db.get_statistics()
print(f'  Total Events: {stats[\"total_events\"]}')
print(f'  Avg Importance: {stats[\"average_importance\"]}/10')
print(f'  Pending Reviews: {stats[\"pending_entries\"]}')
print('\nTop Categories:')
for cat, count in sorted(stats['events_by_category'].items(), key=lambda x: x[1], reverse=True)[:5]:
    print(f'  - {cat}: {count}')
"
        ;;
    
    full|fullsync|sync-all)
        echo -e "${BLUE}üîÑ Full Sync - Review + Graph Update${NC}"
        cd "$KB_DAEMON_PATH" && bash kb_full_sync.sh
        ;;
    
    sync)
        echo -e "${BLUE}üìö Syncing to knowledge graph...${NC}"
        cd /Users/fathindosunmu/DEV/knowledge-base
        if command -v uvx &> /dev/null; then
            uvx basic-memory sync
        else
            echo -e "${YELLOW}‚ö†Ô∏è uvx not found - install with: curl -LsSf https://astral.sh/uv/install.sh | sh${NC}"
        fi
        ;;
    
    graph)
        echo -e "${BLUE}üï∏Ô∏è Viewing knowledge graph...${NC}"
        cd /Users/fathindosunmu/DEV/knowledge-base
        if command -v uvx &> /dev/null; then
            uvx basic-memory graph
        else
            echo -e "${YELLOW}‚ö†Ô∏è uvx not found${NC}"
        fi
        ;;
    
    query)
        shift
        echo -e "${BLUE}üîç Querying knowledge base...${NC}"
        cd /Users/fathindosunmu/DEV/knowledge-base
        if command -v uvx &> /dev/null; then
            uvx basic-memory query "$@"
        else
            echo -e "${YELLOW}‚ö†Ô∏è uvx not found${NC}"
        fi
        ;;
    
    commit|sync-git|push)
        echo -e "${BLUE}üìö Syncing to Git...${NC}"
        cd "$KB_DAEMON_PATH" && bash git_sync.sh
        ;;
    
    backup|backups)
        shift
        case "$1" in
            list|"")
                echo -e "${BLUE}üì¶ Listing backups...${NC}"
                cd "$KB_DAEMON_PATH" && python3 backup_manager.py list
                ;;
            clean|rotate)
                echo -e "${YELLOW}üßπ Cleaning old backups...${NC}"
                cd "$KB_DAEMON_PATH" && python3 backup_manager.py rotate
                ;;
            restore)
                if [ -n "$2" ]; then
                    echo -e "${GREEN}üîÑ Restoring backup: $2${NC}"
                    cd "$KB_DAEMON_PATH" && python3 backup_manager.py restore --backup "$2"
                else
                    echo -e "${RED}Please specify backup name${NC}"
                    echo "Usage: kb backup restore <backup_name>"
                fi
                ;;
            *)
                echo -e "${RED}Unknown backup command: $1${NC}"
                echo "Usage: kb backup [list|clean|restore <name>]"
                ;;
        esac
        ;;
    
    help|--help|-h|"")
        echo -e "${BLUE}üß† KB - Knowledge Base Intelligence System${NC}"
        echo ""
        echo "Usage: kb <command> [options]"
        echo ""
        echo "Commands:"
        echo "  === KB Daemon ==="
        printf "  ${GREEN}%-10s${NC} %s\n" "review" "Run daily review interface"
        printf "  ${GREEN}%-10s${NC} %s\n" "start" "Start the KB daemon"
        printf "  ${GREEN}%-10s${NC} %s\n" "stop" "Stop the KB daemon"
        printf "  ${GREEN}%-10s${NC} %s\n" "status" "Check daemon status"
        printf "  ${GREEN}%-10s${NC} %s\n" "log" "View captured logs"
        printf "  ${GREEN}%-10s${NC} %s\n" "capture" "Manual capture: kb capture 'learned about X'"
        printf "  ${GREEN}%-10s${NC} %s\n" "stats" "Show statistics"
        echo ""
        echo "  === Basic Memory ==="
        printf "  ${GREEN}%-10s${NC} %s\n" "sync" "Sync markdown files to graph"
        printf "  ${GREEN}%-10s${NC} %s\n" "graph" "View knowledge graph"
        printf "  ${GREEN}%-10s${NC} %s\n" "query" "Query knowledge: kb query 'what did I learn?'"
        echo ""
        echo "  === Combined ==="
        printf "  ${GREEN}%-10s${NC} %s\n" "full" "üåü Daily workflow (review + sync)"
        printf "  ${GREEN}%-10s${NC} %s\n" "commit" "üìö Commit KB changes to git"
        printf "  ${GREEN}%-10s${NC} %s\n" "backup" "üì¶ Manage backups (list/clean/restore)"
        echo ""
        echo "Examples:"
        echo "  kb review              # Review today's captures"
        echo "  kb capture 'fixed auth bug'  # Manual entry"
        echo "  kb status              # Check if daemon is running"
        echo "  kb log                 # View recent activity"
        ;;
    
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo "Use 'kb help' for available commands"
        exit 1
        ;;
esac
